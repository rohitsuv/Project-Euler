def is_prime(x):
	if x <=0:
		return False
	if x == 1:
		return False
	c = int(x**0.5)  + 1
	for i in xrange(2,c):
		if x%i == 0:
			return False
			
	return True
	
	
def factors(n):
	l = []
	if n == 1:
		return [1]
	else:
		for i in xrange(2,n+1):
			if n%i == 0:
				l.append(i)
	return l 
	
def rel_prime(a,b):
	l1 = factors(a)
	l2 = factors(b)
	for i in l1:
		if i in l2:
			return False
	return True
	
def totient(n):
	l = 1
	for i in xrange(1,n):
		if rel_prime2(n,i):
			l += 1
	return float(n)/l
	
x = (0,0)
for i in xrange(3,1000001): 
	print i 
	if totient3(i) > x[1]:
		x = (i, totient3(i))

print x 

def rel_prime2(a,b):
	l1 = factors(b)
	for i in l1:
		if a%i == 0:
			return False
	return True
	
def primes_factor(n):
	l = []
	for i in xrange(2,n):
		if is_prime(i) and n%i == 0:
			l.append(i)
	return l 

def factor(n,l):
	for i in l:
		if n%i == 0:
			return True
	return False
		
		
	


def totient2(n):
	if is_prime(n):
		return float(n)/(n-1)
	else:
		l = 1
		a = primes_factor(n)
		for i in xrange(2,n):
			if not factor(i,a):
				l += 1
	return float(n)/l
			
def totient3(n):
	if is_prime(n):
		return float(n)/(n-1)
	else:
		l = 1
		a = primes_factor(n)
		b = funct(n,a)
		return float(n)/b
		
			
			
def funct(n,l):
	if len(l) == 1:
		return n -1 - (n/l[0] - 1)
	elif len(l) == 2:
		return n-1- (n/l[0] - 1 + n/l[1] -1 - (n/l[1] - 1)/l[0])
	elif len(l) == 3:
		a = n-1
		b = (n/l[0] - 1)
		c = n/l[1] -1 - (n/l[1] - 1)/l[0]
		d = (n/l[2] - 1) - (n/l[2] - 1)/l[1] -(n/l[2] - 1)/l[0] + (n/l[2] - 1)/(l[0]*l[1])
		return a - (b + c + d)
	elif len(l) == 4:
		a = n-1
		b = (n/l[0] - 1)
		c = n/l[1] -1 - (n/l[1] - 1)/l[0]
		d = (n/l[2] - 1) - (n/l[2] - 1)/l[1] -(n/l[2] - 1)/l[0] + (n/l[2] - 1)/(l[0]*l[1])
		e = (n/l[3] - 1) - (n/l[3] - 1)/l[2] - (n/l[3] - 1)/l[1] - (n/l[3] - 1)/l[0] + (n/l[3] - 1)/(l[0]*l[1]) + (n/l[3] - 1)/(l[0]*l[2]) + (n/l[3] - 1)/(l[1]*l[2]) -(n/l[3] - 1)/(l[0]*l[1]*l[2])
		return a - (b + c + d + e)
	elif len(l) == 5:
		a = n-1
		b = (n/l[0] - 1)
		c = n/l[1] -1 - (n/l[1] - 1)/l[0]
		d = (n/l[2] - 1) - (n/l[2] - 1)/l[1] -(n/l[2] - 1)/l[0] + (n/l[2] - 1)/(l[0]*l[1])
		e = (n/l[3] - 1) - (n/l[3] - 1)/l[2] - (n/l[3] - 1)/l[1] - (n/l[3] - 1)/l[0] + (n/l[3] - 1)/(l[0]*l[1]) + (n/l[3] - 1)/(l[0]*l[2]) + (n/l[3] - 1)/(l[1]*l[2]) -(n/l[3] - 1)/(l[0]*l[1]*l[2])
		f = (n/l[4] - 1) - (n/l[4] - 1)/l[3] - (n/l[4] - 1)/l[2] - (n/l[4] - 1)/l[1] - (n/l[4] - 1)/l[0] + (n/l[4] - 1)/(l[0]*l[1]) + (n/l[4] - 1)/(l[0]*l[2]) +(n/l[4] - 1)/(l[0]*l[3]) + (n/l[4] - 1)/(l[1]*l[2]) + (n/l[4] - 1)/(l[1]*l[3]) + (n/l[4] - 1)/(l[2]*l[3])- (n/l[4] - 1)/(l[0]*l[1]*l[2]) - (n/l[4] - 1)/(l[0]*l[1]*l[3]) - (n/l[4] - 1)/(l[0]*l[2]*l[3]) - (n/l[4] - 1)/(l[1]*l[2]*l[3]) + (n/l[4] - 1)/(l[0]*l[1]*l[2]*l[3])
		return a - (b+c+d+e+f)
	elif len(l) == 6:
		a = n-1
		b = (n/l[0] - 1)
		c = n/l[1] -1 - (n/l[1] - 1)/l[0]
		d = (n/l[2] - 1) - (n/l[2] - 1)/l[1] -(n/l[2] - 1)/l[0] + (n/l[2] - 1)/(l[0]*l[1])
		e = (n/l[3] - 1) - (n/l[3] - 1)/l[2] - (n/l[3] - 1)/l[1] - (n/l[3] - 1)/l[0] + (n/l[3] - 1)/(l[0]*l[1]) + (n/l[3] - 1)/(l[0]*l[2]) + (n/l[3] - 1)/(l[1]*l[2]) -(n/l[3] - 1)/(l[0]*l[1]*l[2])
		f = (n/l[4] - 1) - (n/l[4] - 1)/l[3] - (n/l[4] - 1)/l[2] - (n/l[4] - 1)/l[1] - (n/l[4] - 1)/l[0] + (n/l[4] - 1)/(l[0]*l[1]) + (n/l[4] - 1)/(l[0]*l[2]) +(n/l[4] - 1)/(l[0]*l[3]) + (n/l[4] - 1)/(l[1]*l[2]) + (n/l[4] - 1)/(l[1]*l[3]) + (n/l[4] - 1)/(l[2]*l[3])- (n/l[4] - 1)/(l[0]*l[1]*l[2]) - (n/l[4] - 1)/(l[0]*l[1]*l[3]) - (n/l[4] - 1)/(l[0]*l[2]*l[3]) - (n/l[4] - 1)/(l[1]*l[2]*l[3]) + (n/l[4] - 1)/(l[0]*l[1]*l[2]*l[3])
		g = (n/l[5] - 1) - (n/l[5] - 1)/l[4] - (n/l[5] - 1)/l[3] - (n/l[5] - 1)/l[2] - (n/l[5] - 1)/l[1] - (n/l[5] - 1)/l[0] + (n/l[5] - 1)/(l[0]*l[1]) + (n/l[5] - 1)/(l[0]*l[2]) + (n/l[5] - 1)/(l[0]*l[3]) + (n/l[5] - 1)/(l[0]*l[4]) + (n/l[5] - 1)/(l[1]*l[2]) + (n/l[5] - 1)/(l[1]*l[3]) +(n/l[5] - 1)/(l[1]*l[4]) + (n/l[5] - 1)/(l[2]*l[3]) +(n/l[5] - 1)/(l[2]*l[4]) + (n/l[5] - 1)/(l[3]*l[4]) - (n/l[5] - 1)/(l[2]*l[3]*l[4]) - (n/l[5] - 1)/(l[1]*l[3]*l[4]) - (n/l[5] - 1)/(l[1]*l[2]*l[4]) - (n/l[5] - 1)/(l[1]*l[3]*l[2]) - (n/l[5] - 1)/(l[0]*l[3]*l[4]) - (n/l[5] - 1)/(l[0]*l[2]*l[4]) - (n/l[5] - 1)/(l[0]*l[3]*l[2]) - (n/l[5] - 1)/(l[1]*l[0]*l[4]) - (n/l[5] - 1)/(l[1]*l[3]*l[0]) - (n/l[5] - 1)/(l[1]*l[0]*l[2]) + (n/l[5] - 1)/(l[0]*l[1]*l[2]*l[3]) + (n/l[5] - 1)/(l[0]*l[1]*l[2]*l[4]) + (n/l[5] - 1)/(l[0]*l[1]*l[4]*l[3]) + (n/l[5] - 1)/(l[0]*l[4]*l[2]*l[3]) + (n/l[5] - 1)/(l[4]*l[1]*l[2]*l[3]) - (n/l[5] - 1)/(l[4]*l[1]*l[2]*l[3]*l[0])
		return a - (b+c+d+e+f+g)
	elif len(l) == 7:
		a = n-1
		b = (n/l[0] - 1)
		c = n/l[1] -1 - (n/l[1] - 1)/l[0]
		d = (n/l[2] - 1) - (n/l[2] - 1)/l[1] -(n/l[2] - 1)/l[0] + (n/l[2] - 1)/(l[0]*l[1])
		e = (n/l[3] - 1) - (n/l[3] - 1)/l[2] - (n/l[3] - 1)/l[1] - (n/l[3] - 1)/l[0] + (n/l[3] - 1)/(l[0]*l[1]) + (n/l[3] - 1)/(l[0]*l[2]) + (n/l[3] - 1)/(l[1]*l[2]) -(n/l[3] - 1)/(l[0]*l[1]*l[2])
		f = (n/l[4] - 1) - (n/l[4] - 1)/l[3] - (n/l[4] - 1)/l[2] - (n/l[4] - 1)/l[1] - (n/l[4] - 1)/l[0] + (n/l[4] - 1)/(l[0]*l[1]) + (n/l[4] - 1)/(l[0]*l[2]) +(n/l[4] - 1)/(l[0]*l[3]) + (n/l[4] - 1)/(l[1]*l[2]) + (n/l[4] - 1)/(l[1]*l[3]) + (n/l[4] - 1)/(l[2]*l[3])- (n/l[4] - 1)/(l[0]*l[1]*l[2]) - (n/l[4] - 1)/(l[0]*l[1]*l[3]) - (n/l[4] - 1)/(l[0]*l[2]*l[3]) - (n/l[4] - 1)/(l[1]*l[2]*l[3]) + (n/l[4] - 1)/(l[0]*l[1]*l[2]*l[3])
		g = (n/l[5] - 1) - (n/l[5] - 1)/l[4] - (n/l[5] - 1)/l[3] - (n/l[5] - 1)/l[2] - (n/l[5] - 1)/l[1] - (n/l[5] - 1)/l[0] + (n/l[5] - 1)/(l[0]*l[1]) + (n/l[5] - 1)/(l[0]*l[2]) + (n/l[5] - 1)/(l[0]*l[3]) + (n/l[5] - 1)/(l[0]*l[4]) + (n/l[5] - 1)/(l[1]*l[2]) + (n/l[5] - 1)/(l[1]*l[3]) +(n/l[5] - 1)/(l[1]*l[4]) + (n/l[5] - 1)/(l[2]*l[3]) +(n/l[5] - 1)/(l[2]*l[4]) + (n/l[5] - 1)/(l[3]*l[4]) - (n/l[5] - 1)/(l[2]*l[3]*l[4]) - (n/l[5] - 1)/(l[1]*l[3]*l[4]) - (n/l[5] - 1)/(l[1]*l[2]*l[4]) - (n/l[5] - 1)/(l[1]*l[3]*l[2]) - (n/l[5] - 1)/(l[0]*l[3]*l[4]) - (n/l[5] - 1)/(l[0]*l[2]*l[4]) - (n/l[5] - 1)/(l[0]*l[3]*l[2]) - (n/l[5] - 1)/(l[1]*l[0]*l[4]) - (n/l[5] - 1)/(l[1]*l[3]*l[0]) - (n/l[5] - 1)/(l[1]*l[0]*l[2]) + (n/l[5] - 1)/(l[0]*l[1]*l[2]*l[3]) + (n/l[5] - 1)/(l[0]*l[1]*l[2]*l[4]) + (n/l[5] - 1)/(l[0]*l[1]*l[4]*l[3]) + (n/l[5] - 1)/(l[0]*l[4]*l[2]*l[3]) + (n/l[5] - 1)/(l[4]*l[1]*l[2]*l[3]) - (n/l[5] - 1)/(l[4]*l[1]*l[2]*l[3]*l[0])
		h =  (n/l[6] - 1) - (n/l[6] - 1)/l[5] - (n/l[6] - 1)/l[4] - (n/l[6] - 1)/l[3] - (n/l[6] - 1)/l[2] - (n/l[6] - 1)/l[1] - (n/l[6] - 1)/l[0] + (n/l[6] - 1)/(l[0]*l[1]) + (n/l[6] - 1)/(l[0]*l[2]) + (n/l[6] - 1)/(l[0]*l[3]) + (n/l[6] - 1)/(l[0]*l[4]) + (n/l[6] - 1)/(l[0]*l[5]) + (n/l[6] - 1)/(l[1]*l[2]) + (n/l[6] - 1)/(l[1]*l[3]) + (n/l[6] - 1)/(l[1]*l[4]) + (n/l[6] - 1)/(l[1]*l[5]) + (n/l[6] - 1)/(l[2]*l[3]) + (n/l[6] - 1)/(l[2]*l[4]) + (n/l[6] - 1)/(l[2]*l[5]) + (n/l[6] - 1)/(l[3]*l[4]) + (n/l[6] - 1)/(l[3]*l[5]) + (n/l[6] - 1)/(l[4]*l[5]) - (n/l[6] - 1)/(l[0]*l[1]*l[2]) - (n/l[6] - 1)/(l[0]*l[1]*l[3]) - (n/l[6] - 1)/(l[0]*l[1]*l[4]) - (n/l[6] - 1)/(l[0]*l[1]*l[5]) - (n/l[6] - 1)/(l[0]*l[2]*l[3]) - (n/l[6] - 1)/(l[0]*l[2]*l[4]) - (n/l[6] - 1)/(l[0]*l[2]*l[5]) - (n/l[6] - 1)/(l[0]*l[3]*l[4]) - (n/l[6] - 1)/(l[0]*l[3]*l[5]) -(n/l[6] - 1)/(l[0]*l[4]*l[5]) - (n/l[6] - 1)/(l[1]*l[2]*l[3]) - (n/l[6] - 1)/(l[1]*l[2]*l[4]) - (n/l[6] - 1)/(l[1]*l[2]*l[5]) - (n/l[6] - 1)/(l[1]*l[3]*l[4]) - (n/l[6] - 1)/(l[1]*l[3]*l[5]) -(n/l[6] - 1)/(l[1]*l[4]*l[5]) - (n/l[6] - 1)/(l[4]*l[2]*l[3]) - (n/l[6] - 1)/(l[5]*l[2]*l[3]) - (n/l[6] - 1)/(l[4]*l[2]*l[5]) - (n/l[6] - 1)/(l[3]*l[4]*l[5]) + (n/l[6] - 1)/(l[4]*l[5]*l[2]*l[3]) + (n/l[6] - 1)/(l[4]*l[5]*l[1]*l[3]) + (n/l[6] - 1)/(l[4]*l[5]*l[2]*l[1]) + (n/l[6] - 1)/(l[1]*l[5]*l[2]*l[3]) + (n/l[6] - 1)/(l[4]*l[1]*l[2]*l[3]) + (n/l[6] - 1)/(l[4]*l[5]*l[0]*l[3]) + (n/l[6] - 1)/(l[4]*l[5]*l[2]*l[0]) + (n/l[6] - 1)/(l[0]*l[5]*l[2]*l[3]) + (n/l[6] - 1)/(l[4]*l[0]*l[2]*l[3]) + (n/l[6] - 1)/(l[4]*l[5]*l[0]*l[1]) + (n/l[6] - 1)/(l[0]*l[5]*l[1]*l[3]) + (n/l[6] - 1)/(l[4]*l[1]*l[0]*l[3]) + (n/l[6] - 1)/(l[1]*l[5]*l[2]*l[0]) + (n/l[6] - 1)/(l[4]*l[0]*l[2]*l[1]) + (n/l[6] - 1)/(l[0]*l[1]*l[2]*l[3]) - (n/l[6] - 1)/(l[4]*l[1]*l[2]*l[3]*l[0]) -  (n/l[6] - 1)/(l[5]*l[1]*l[2]*l[3]*l[0]) -  (n/l[6] - 1)/(l[4]*l[1]*l[2]*l[5]*l[0]) -  (n/l[6] - 1)/(l[4]*l[1]*l[5]*l[3]*l[0]) -  (n/l[6] - 1)/(l[4]*l[5]*l[2]*l[3]*l[0]) -  (n/l[6] - 1)/(l[4]*l[1]*l[2]*l[3]*l[5]) + (n/l[6] - 1)/(l[4]*l[1]*l[2]*l[3]*l[5]*l[0])
		return a - (b + c+d+e+f+g+h)	
		
		
		
		
		
		
		